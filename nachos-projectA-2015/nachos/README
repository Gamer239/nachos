Names:
Mike Grimes
Zach Malinowski

Slip Days Used (both): 0
Slip Days Left (both): 0

== Notice ==

 - We were unable to get Exec arguments working 100% correctly.
   Usually a program that requires arguments will not always fail,
   but the strings that are read are not what is expected. Maybe
   this could be thought of as a feature. A random number generator,
   perhaps.
 - As a result of the previous point, the checkpoint syscall does not
   work. While it correctly creates a file to store the state of a
   running process, it is unable to load the stack back into the
   running nachos system correctly.

== Virtual Memory implementation details ==

 - On a page fault, the system checks whether or not there is an open
   frame in the physical memory by consulting the PageMap (which is
   a wrapper around the BitMap class). If there are open frames, the
   page that was originally trying to be accessed will be loaded into
   the first open frame.
 - If there are no open frames, a victim frame is selected in a FIFO
   fashion. FIFO was chosen because it was super easy to implement, and
   required almost no extra code (only an 'inTime' field needed to be
   added to the TranslationEntry class, and a few lines to find the
   min).
 - Once the victim frame is selected, the thread that currently has a
   virtual page mapped to that frame is told either to store the page
   in a swap file if the dirty bit is set, or just invalidate the
   entry in the pageTable otherwise.
 - The swap file is merely a temporary file (put int "/tmp/swap.%d")
   where %d is the integer value of the pointer of the AddrSpace object.
 - The physicalPage mapping of a TranslationEntry in an address spaces'
   pageTable can contain 1 of three types of values. Two of these types
   are #defines IN_SWAP, and NOT_LOADED. These obviously refer to the page
   either being stored in a swap file, or not loaded (stored in the
   executable file). Otherwise, the physicalPage field will hold a valid,
   nonnegative integer, denoting the physical frame that the virtual
   page maps to.
 - When an address space is loading a page into memory (after a page
   fault has occured on an attempted access to that page) The address
   space checks whether or not the page is in either the NOT_LOADED, 
   or is IN_SWAP states. If the page has not been loaded, the page will
   be loaded from the executable file. Otherwise, it is brought back
   in from the swap file.
 - We wanted to attempt an LRU implementation for page-swapping, but
   we were unable to find a place where we could modify the code that
   allowed us to tell when pages are accessed.

== Tests ==

 - We didn't add any of our own tests, other than modifying a few
   previous tests to try out checkpoint and exec arguments.
 - We ran some of the tests in the /classes/.../nachos/ folder, though.
   you can run test/shell, and then run other programs from that.
 - I think a good demonstration of the page-swapping capabilities
   is to lower the # of physical pages in machine.h and also lower
   the sectorsize, then open a number of test/shell's inside of each
   other, and run some other programs from that (matmult or retadd)
 
