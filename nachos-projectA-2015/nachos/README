2b)

If a car arrives while traffic is currently moving in its direction it will
have priority over another car who has been waiting for longer in the other
direction. This happens because the current direction of travel will wait
until there are no more available cars for that direction. After that point
it will then release lock to allow the other side to travel.

3)

The threads with the higher priorities will run first. In the case of two 
producers and one consumer, where one producer is of a higher priority than
the other and the consumer thread, the single producer will run, fill up the
buffer (or use put all of its resources in the buffer) and then the consumer
and producer that are left will continue to remove items and add items,
respectively.

In the case where the two producers are the same priority, and the consumer
is a higher priority, the consumer will consume items in the buffer until it
is empty, and then a producer will put items into the buffer until it must
yield the processor, and the consumer will consume it, immediately. This will
happen until all producer resources have been put into the buffer and consumed.

4a)

A hardware timer generates a CPU interrupt every X milliseconds. A hardware
timer is emulated by scheduling an interrupt to occur every time
stats->totalTicks has increased by TimerTicks.

4b)

A thread also allocates its own stack, ensures it it deallocated correctly
upon exit, and ensures no stack overflows have occured.

User state is also saved in the thread code.

4c)

As described in the i386 hardware specific assembly routine file 'swtch.s',
when a context switch occurs, the current threads registers are stored on
the stack pointer, and the new threads registers are loaded.

5)

Tests: All tests in threads/tests/ have been run, after linking them as
described in the project specifications.

